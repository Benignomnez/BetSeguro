"use client";

import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Skeleton } from "@/components/ui/skeleton";
import { generateClientAiInsight } from "@/lib/client-api";
import type { Game } from "@/lib/odds-api";
import { Sparkles, AlertCircle, RotateCw } from "lucide-react";
import { Button } from "@/components/ui/button";

export default function AiInsight({ game }: { game: Game }) {
  const [insight, setInsight] = useState<string | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [retryCount, setRetryCount] = useState(0);
  const maxRetries = 2;

  useEffect(() => {
    async function loadInsight() {
      try {
        setLoading(true);
        const data = await generateClientAiInsight(game);
        setInsight(data);
        setError(null);
      } catch (err) {
        console.error("Failed to load AI insight:", err);
        setError("Failed to generate AI insight. Please try again later.");

        // Retry logic
        if (retryCount < maxRetries) {
          console.log(
            `Retrying AI insight generation (${
              retryCount + 1
            }/${maxRetries})...`
          );
          setRetryCount((prev) => prev + 1);
        }
      } finally {
        setLoading(false);
      }
    }

    loadInsight();
  }, [game, retryCount]);

  return (
    <Card className="overflow-hidden border-0 shadow-md">
      <CardHeader className="bg-gradient-to-r from-indigo-500 to-purple-600 pb-4">
        <CardTitle className="flex items-center gap-2 text-white">
          <Sparkles className="h-5 w-5" />
          AI Analysis & Insights
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        {loading ? (
          <div className="space-y-4">
            <div className="flex items-center gap-2 text-sm text-gray-500 animate-pulse">
              <Sparkles className="h-4 w-4" />
              <span>Generating AI insights...</span>
            </div>
            <Skeleton className="h-4 w-full mb-2" />
            <Skeleton className="h-4 w-full mb-2" />
            <Skeleton className="h-4 w-3/4" />
          </div>
        ) : error ? (
          <div className="p-4 rounded-lg bg-red-50 border border-red-100">
            <div className="flex items-start gap-3">
              <AlertCircle className="h-5 w-5 text-red-500 mt-0.5" />
              <div>
                <p className="text-red-800 font-medium mb-2">{error}</p>
                {retryCount < maxRetries && (
                  <Button
                    onClick={() => setRetryCount((prev) => prev + 1)}
                    variant="outline"
                    size="sm"
                    className="mt-2"
                  >
                    <RotateCw className="h-3 w-3 mr-1" /> Try again
                  </Button>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div>
            <div className="text-sm text-gray-500 mb-4 flex items-center">
              <Sparkles className="h-4 w-4 mr-2 text-indigo-500" />
              <span>
                Generated by AI based on historical data and current odds
              </span>
            </div>
            <div className="prose prose-gray prose-sm max-w-none">
              {insight?.split("\n\n").map((paragraph, index) => (
                <p key={index} className="mb-4 leading-relaxed">
                  {paragraph}
                </p>
              ))}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
